#!/usr/bin/env python2

import argparse
import collections
import json
import os

DEFAULT_OUT_FILENAME = 'analyzed_results.json'

class DetectionAnalyzer:
   def __init__(self, detection_results):
      self._detection_results = detection_results
      # {detector_name: {feature_name: {result: count}}}
      self._analyzed_results = collections.defaultdict(
         lambda: collections.defaultdict(
            lambda: collections.defaultdict(int)))

   def run(self):
      # For every package, extract the features and record
      # the result for each feature in a dictionary mapping
      # features to feature results and their counts
      for package_detection_result in self._detection_results:
         detectors = package_detection_result['detection_tool_output']
         for (detector_name, features) in detectors.iteritems():
            detector = self._analyzed_results[detector_name]
            for (feature_name, feature_result) in features.iteritems():
               detector[feature_name][feature_result] += 1

      return self._analyzed_results

if __name__ == '__main__':
   parser = argparse.ArgumentParser()
   parser.add_argument('detection_results',
                       help=('JSON file with detection results, generated by '
                             'detection_harness'))
   parser.add_argument('--out', help="output file path, default: %s" % DEFAULT_OUT_FILENAME,
                       default=DEFAULT_OUT_FILENAME)
   args = parser.parse_args()

   # Verify detection results.
   detection_results_path = os.path.join(os.getcwd(), args.detection_results)
   if not os.path.isfile(detection_results_path):
      sys.stderr.write('detection results file "%s" does not exist' % args.detection_results)
      exit(errno.ENOENT)

   # Read detection results.
   with open(detection_results_path) as f:
      detection_results = json.load(f)

   analyzer = DetectionAnalyzer(detection_results)
   analyzed_results = analyzer.run()

   # Save results to output file.
   with open(os.path.join(os.getcwd(), args.out), 'w') as f:
      json.dump(analyzed_results, f, indent=4)
      f.write('\n')
